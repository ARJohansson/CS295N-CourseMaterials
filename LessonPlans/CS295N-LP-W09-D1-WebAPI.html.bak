<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title>Week 8, Day 2, Validation</title>
    <style type="text/css">
body {
  font-family: "Arial", "Helvetica", "sans-serif";
}

#week09 {
  background-color: #f8ff2e;
}

code {
  font-size: larger;
  background-color: lightgoldenrodyellow;
}

.exercise {
  background-color: #c6ffe2;
}

</style> </head>
  <body>
    <header> <b>CS295N Web Development 1: ASP.NET&nbsp;&nbsp;
        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; November 15, 2017<br>
      </b>
      <div>Brian Bird</div>
      <br>
      <i><b>Topic: Validation Using Data Annotations<br>
        </b></i></header>
    <section>
      <article> <br>
        <b>Topics<br>
        </b>
        <table style="width: 807px; height: 127px;" border="1">
          <tbody>
            <tr>
              <td>1. Intro to Razor Pages</td>
              <td>6. More EF and Publishing to Azure</td>
            </tr>
            <tr>
              <td>2. Code-behind, session state, and page layout files</td>
              <td>7. Async Programming and More Azure</td>
            </tr>
            <tr>
              <td>3. Tag Helpers, model binding, and unit testing</td>
              <td id="week08">8. LINQ and Validation</td>
            </tr>
            <tr>
              <td>4. More on session state and form input</td>
              <td id="week09">9. Web API<br>
              </td>
            </tr>
            <tr>
              <td>5. Entity Framework and SQL Databases</td>
              <td>10. Web API and JavaScript<br>
              </td>
            </tr>
          </tbody>
        </table>
        <b><br>
          <br>
          Introduction</b><br>
        <ul>
          <li>Discuss new textbook <br>
          </li>
          <li>Review due dates:</li>
          <ul>
            <li>Today</li>
            <ul>
              <li>Lab 7 production version</li>
              <li>Term project proposal</li>
            </ul>
            <li>Saturday, 11/18</li>
            <ul>
              <li>Lab 8 Beta version</li>
            </ul>
            <li>Monday, 11/20</li>
            <ul>
              <li>Lab 8 code review</li>
            </ul>
          </ul>
        </ul>
      </article>
      <article>
        <div><b>Term Project Due Dates</b></div>
        <div>
          <ul>
            <li>Proposal: 11/15, Wednesday of this week</li>
            <li>Beta version: 11/30, Thursday of week 10</li>
            <li>In-class presentation: 12/4, Monday of finals week</li>
            <li>Production version: 12/5<b>, </b>Tuesday of finals week<b><br>
              </b></li>
          </ul>
        </div>
        <div><b>Overview</b></div>
        <div>
          <ul>
            <b>
              <li><a href="#topic1">C# Attributes</a></li>
              <li><a href="#topic2">Data Annotations<br>
                </a></li>
              <li><a href="#topic3">Validation using Data Annotations</a></li>
              <br>
            </b>
          </ul>
        </div>
      </article>
    </section>
    <section>
      <article id="topic1">
        <p> <u><b>C# Attributes</b></u></p>
        <ul>
          <ul>
            <ul>
            </ul>
          </ul>
          <li>Programming Guide: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/">C#
              Attributes</a></li>
          <li>Attributes are a means of associating metadata with code</li>
          <ul>
            <li>Metadata is additional information about types defined in your
              program (and remember that classes are types).</li>
            <li>Attributes are declarative.</li>
            <li>Attributes can be applied to assemblies (think DLLs), classes,
              methods, and properties.<br>
              <code>[BindProperty]<br>
                public Movie Movie { get; set; }<br>
                <br>
              </code> </li>
            <li>Attributes can accept arguments.<br>
              <code>[attribute(positional_parameters, name_parameter = value,
                ...)]</code></li>
            <ul>
              <li>Example using positional parameters:<br>
                <code>[ObsoleteAttribute("This method is deprecated", false)]<br>
                  public void AnOutdatedMethod()<br>
                  <br>
                </code></li>
            </ul>
            <ul>
              <li>Example using named parameters:<br>
                <code>[ObsoleteAttribute(Message = "This method is deprecated",
                  IsError = false)]<br>
                  public void AnOutdatedMethod()<br>
                  <br>
                </code></li>
              <li>API Reference: <a href="https://docs.microsoft.com/en-us/dotnet/api/system.obsoleteattribute?view=netcore-2.0">ObsoleteAttribute</a></li>
            </ul>
            <ul>
            </ul>
            <ul>
            </ul>
          </ul>
        </ul>
        <p></p>
        <code></code> </article>
      <article id="topic2">
        <p><u><b><br>
            </b></u></p>
        <p><u><b>Data Annotations </b></u></p>
        <ul>
          <li>API Reference: <a href="https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations?view=netcore-2.0">System.ComponentModel.DataAnnotations
              Namespace</a></li>
          <ul>
            <li>Most of these attributes are for validation</li>
          </ul>
        </ul>
        <a href="https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations?view=netcore-2.0">
        </a>
        <ul>
          <a href="https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations?view=netcore-2.0"></a>
        </ul>
        <code></code><br>
      </article>
      <article id="topic3">
        <p><b><u>Validation using Data Annotations</u><br>
          </b></p>
        <ul>
          <li>Razor Pages Movie Tutorial: <a href="https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/validation">Adding
              Validation</a></li>
          <li>API Reference: see above</li>
          <li>Validation is specified on the data model and is then enforced in
            multiple places:</li>
          <ul>
            <li>In the database</li>
            <li>In HTML form elements in the browser using jQuery validate</li>
            <li>In HTTP Requests processed on the server (in case JavaScript is
              disabled in the browser)</li>
            <ul>
              <li>Add a break-point to a request method to test this</li>
              <li>Test this again after <a href="https://www.wikihow.com/Disable-JavaScript">disabling
                  JavaScript</a><br>
              </li>
            </ul>
          </ul>
          <li>Validation Example:<br>
            <code>[StringLength(60, MinimumLength = 3)]<br>
              [Required]<br>
              public string Title { get; set; }<br>
              <br>
            </code></li>
          <li>Checking validation in the web page</li>
          <ul>
            <li>The Input Tag Helper, asp-for, generates id and name HTML
              attributes to the assigned value as well as setting the type
              attribute based on the model type and data annotations. These are
              used by jQuery Validate.<br>
              <code>&lt;input asp-for="Movie.Title" class="form-control" /&gt;</code></li>
          </ul>
          <li>Checking validation in the code-behind</li>
          <ul>
            <li>Validation is represented by the ModelState object which is an
              instance of the <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.modelbinding.modelstatedictionary?view=aspnetcore-2.0">ModelStateDictionary
                class</a></li>
            The IsValid property will be false if there were any validation
            errors<br>
            <code> if (!ModelState.IsValid)<br>
              {<br>
              &nbsp;&nbsp;&nbsp; return Page();<br>
              } </code><br>
          </ul>
        </ul>
      </article>
      <b>This week's Lab Assignment<br>
      </b>
      <ul>
        <li>Add a search page</li>
        <ul>
          <li>Query using a "normal" LINQ expression</li>
        </ul>
        <ul>
          <li>Query using a lambda expression</li>
        </ul>
        <li>Add validation to the data model</li>
        <li>Publish an update to Azure</li>
      </ul>
    </section>
  </body>
</html>
